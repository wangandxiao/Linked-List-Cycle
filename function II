// Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (head==NULL || head->next == NULL) return NULL;
        ListNode *fast = head;
        ListNode *slow = head;
        ListNode *s1 = head;
        ListNode *s2;
        bool isCycle = false;
        while(fast->next != NULL && fast->next->next != NULL){
            
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) {
                s2 = slow;
                isCycle = true;
                break;
            }
        }
        if (isCycle){
            while(s1!=s2){
                s1 = s1->next;
                s2 = s2->next;
            }
            return s1;
        }
        else return NULL;
        
    }
};
